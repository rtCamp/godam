/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./public-assets/js/transcoder.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./public-assets/js/transcoder.js":
/*!****************************************!*\
  !*** ./public-assets/js/transcoder.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*global rtMediaHook, rtTranscoder, get_parameter, bp_template_pack*/\n\nconst mediaThumbnails = {};\nlet isCommentMedia = false;\nlet isIntervalSet = false;\n\n( function( $ ) {\n\t/**\n\t * Document ready method.\n\t */\n\t$( document ).ready( () => {\n\t\t/**\n\t\t * Event after activity is loaded on BuddyPress' activity page.\n\t\t */\n\t\t$( document ).ajaxComplete( ( event, xhr, settings ) => {\n\t\t\tif ( 'undefined' !== typeof bp_template_pack && 'legacy' !== bp_template_pack && bp_template_pack && 'function' === typeof get_parameter ) {\n\t\t\t\tconst getAction = get_parameter( 'action', settings.data );\n\t\t\t\tif ( 'activity_filter' === getAction ) {\n\t\t\t\t\tsetTimeout( () => {\n\t\t\t\t\t\t$( '#activity-stream > .activity-list > li .media-type-video > .rtmedia-item-thumbnail video' ).each( ( i, elem ) => {\n\t\t\t\t\t\t\telem = $( elem );\n\t\t\t\t\t\t\tif ( ( 'undefined' !== typeof elem.attr( 'poster' ) && elem.attr( 'poster' ).length > 0 ) || 'undefined' === typeof elem.attr( 'id' ) || ! elem.attr( 'id' ).length ) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst id = parseInt( elem.attr( 'id' ).replace( /^\\D+/g, '' ) );\n\t\t\t\t\t\t\taddToMediaThumbnailQueue( id );\n\t\t\t\t\t\t} );\n\t\t\t\t\t\t// Request thumbnails if mediaThumbnails has any elements.\n\t\t\t\t\t\tsetRequestInterval();\n\t\t\t\t\t}, 1000 );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * Code for media page.\n\t\t */\n\t\t$( '.rtmedia-container ul.rtmedia-list.rtmedia-list-media.rtm-gallery-list > li.rtmedia-list-item' ).each( ( i, elem ) => {\n\t\t\telem = $( elem );\n\t\t\tconst img = elem.find( 'a.rtmedia-list-item-a > .rtmedia-item-thumbnail > img' );\n\t\t\tif ( ! img.length || 'undefined' === typeof img.attr( 'src' ) || -1 === img.attr( 'src' ).search( 'video_thumb.png' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\taddToMediaThumbnailQueue( parseInt( elem.attr( 'id' ) ) );\n\t\t} );\n\t\t// Request thumbnails if mediaThumbnails has any elements.\n\t\tsetRequestInterval();\n\n\t\tif ( 'undefined' !== typeof rtMediaHook ) {\n\t\t\t/**\n\t\t\t * Check if uploaded media is comment media.\n\t\t\t */\n\t\t\trtMediaHook.register( 'rtmedia_js_file_added', ( data ) => {\n\t\t\t\tif ( 'undefined' === typeof data || 'undefined' === typeof data[ 2 ] ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tif ( -1 === data[ 2 ].search( '#rtmedia_uploader_filelist-activity-' ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tisCommentMedia = true;\n\n\t\t\t\treturn true;\n\t\t\t} );\n\n\t\t\t/**\n\t\t\t * Code for media page when a media is uploaded.\n\t\t\t */\n\t\t\trtMediaHook.register( 'rtmedia_js_after_file_upload', ( data ) => {\n\t\t\t\tif ( 'undefined' === typeof data || 'undefined' === typeof data[ 1 ] || 'undefined' === typeof data[ 2 ] ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tconst type = data[ 1 ].type.split( '/' );\n\t\t\t\tif ( 'video' !== type[ 0 ] ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tconst rtMediaObj = JSON.parse( data[ 2 ] );\n\t\t\t\tif ( true === Array.isArray( rtMediaObj ) && 'undefined' !== typeof rtMediaObj[ 0 ] ) {\n\t\t\t\t\taddToMediaThumbnailQueue( rtMediaObj[ 0 ] );\n\n\t\t\t\t\tif ( true === isCommentMedia ) {\n\t\t\t\t\t\trequestThumbnails();\n\t\t\t\t\t\tisCommentMedia = false;\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tif ( 'undefined' !== typeof rtMediaObj.media_id ) {\n\t\t\t\t\taddToMediaThumbnailQueue( rtMediaObj.media_id );\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t} );\n\n\t\t\trtMediaHook.register( 'rtmedia_js_after_files_uploaded', () => {\n\t\t\t\tsetRequestInterval();\n\t\t\t\treturn true;\n\t\t\t} );\n\n\t\t\trtMediaHook.register( 'rtmedia_js_after_activity_added', () => {\n\t\t\t\tsetRequestInterval();\n\t\t\t\treturn true;\n\t\t\t} );\n\t\t}\n\t} );\n\n\t/**\n\t * Add media ID to mediaThumbnails array.\n\t *\n\t * @param {int} mediaID Media ID.\n\t *\n\t * @return {void}\n\t */\n\tconst addToMediaThumbnailQueue = ( mediaID ) => {\n\t\tif ( 'undefined' !== typeof mediaThumbnails[ mediaID ] ) {\n\t\t\treturn;\n\t\t}\n\t\tmediaThumbnails[ mediaID ] = {};\n\t};\n\n\t/**\n\t * Make ajax request to get thumbnail URL.\n\t *\n\t * @return {void}\n\t */\n\tconst requestThumbnails = () => {\n\t\tif ( ! Object.entries( mediaThumbnails ).length ) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet mediaIDsToRequest = [];\n\t\tfor ( const [ mediaID, obj ] of Object.entries( mediaThumbnails ) ) {\n\t\t\tif ( 'undefined' === typeof mediaID || 'undefined' === typeof obj ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ( false === isValidObject( obj ) ) {\n\t\t\t\tmediaIDsToRequest.push( mediaID );\n\t\t\t}\n\t\t}\n\n\t\tif ( ! mediaIDsToRequest.length ) {\n\t\t\treturn;\n\t\t}\n\t\tmediaIDsToRequest = mediaIDsToRequest.join();\n\n\t\t$.get( rtTranscoder.restURLPrefix + '/transcoder/v1/amp-rtmedia?media_ids=' + mediaIDsToRequest, ( data ) => {\n\t\t\tcheckResponse( data );\n\t\t} );\n\t};\n\n\t/**\n\t * Check response received from ajax request.\n\t *\n\t * @param {object|boolean} data Response object or false.\n\t *\n\t * @return {void}\n\t */\n\tconst checkResponse = ( data = false ) => {\n\t\tif ( 'object' === typeof data ) {\n\t\t\tfor ( const [ mediaIDStr, obj ] of Object.entries( data ) ) {\n\t\t\t\tif ( 'undefined' === typeof mediaIDStr || 'undefined' === typeof obj ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst mediaID = parseInt( mediaIDStr );\n\n\t\t\t\tif ( 'invalid' === obj ) {\n\t\t\t\t\tif ( 'undefined' !== typeof mediaThumbnails[ mediaID ] ) {\n\t\t\t\t\t\tdelete mediaThumbnails[ mediaID ];\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif ( false !== isValidObject( obj ) ) {\n\t\t\t\t\tmediaThumbnails[ mediaID ] = obj;\n\t\t\t\t\tupdateVideoThumbnail( mediaID );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tsetRequestInterval();\n\t};\n\n\t/**\n\t * Sets interval to request thumbnails.\n\t *\n\t * @return {void}\n\t */\n\tconst setRequestInterval = () => {\n\t\tif ( true === isIntervalSet ) {\n\t\t\treturn;\n\t\t}\n\n\t\tisIntervalSet = true;\n\t\tsetTimeout( () => {\n\t\t\trequestThumbnails();\n\t\t\tisIntervalSet = false;\n\t\t}, 5000 );\n\t};\n\n\t/**\n\t * Update video thumbnail in DOM.\n\t *\n\t * @param {int} mediaID Media ID.\n\t *\n\t * @return {void}\n\t */\n\tconst updateVideoThumbnail = ( mediaID ) => {\n\t\tif ( 'undefined' === typeof mediaThumbnails[ mediaID ] || ! isValidObject( mediaThumbnails[ mediaID ] ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst li = $( 'li#' + mediaID );\n\t\tif ( li.length > 0 ) {\n\t\t\tconst img = li.find( 'div.rtmedia-item-thumbnail > img' );\n\t\t\tif ( ! img.length ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\timg.attr( 'src', mediaThumbnails[ mediaID ].poster );\n\t\t\treturn;\n\t\t}\n\n\t\tconst video = $( 'video#rtgodam_media_video_' + mediaID );\n\t\tif ( video.length > 0 ) {\n\t\t\tvideo.attr( 'poster', mediaThumbnails[ mediaID ].poster );\n\t\t\treturn;\n\t\t}\n\n\t\tconst video1 = $( 'video#rtgodam_media_video_' + mediaID + '_from_mejs' );\n\t\tif ( video1.length > 0 ) {\n\t\t\tvideo1.attr( 'poster', mediaThumbnails[ mediaID ].poster );\n\n\t\t}\n\t};\n\n\t/**\n\t * Check whether an object is valid or not.\n\t *\n\t * @param {object} obj Object contains thumbnails details.\n\t *\n\t * @return {boolean} Whether the object is valid or not.\n\t */\n\tconst isValidObject = ( obj ) => {\n\t\treturn ( 'undefined' !== typeof obj.poster );\n\t};\n}( jQuery ) );\n\n\n//# sourceURL=webpack:///./public-assets/js/transcoder.js?");

/***/ })

/******/ });